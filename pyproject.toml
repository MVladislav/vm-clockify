[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "vm_clockify"
description = "clockify api usage to upload into youtrack."
keywords = ["youtrack", "clockify", "time"]

version = "1.0.0"
requires-python = ">=3.12.0"
readme = "README.md"
license = { text = "MIT" }

authors = [{ name = "MVladislav" }]

dependencies = [
  "bs4==0.0.2",               # https://pypi.org/project/bs4
  "click==8.1.8",             # https://pypi.org/project/click
  "coloredlogs==15.0.1",      # https://pypi.org/project/coloredlogs
  "holidays==0.69",           # https://pypi.org/project/holidays
  "httpx==0.28.1",            # https://pypi.org/project/httpx
  "pydantic==2.11.2",         # https://pypi.org/project/pydantic
  "pydantic-settings==2.8.1", # https://pypi.org/project/pydantic-settings
  "pytz==2024.2",             # https://pypi.org/project/pytz
  "starlette==0.46.1",        # https://pypi.org/project/starlette
  "string-color==1.2.3",      # https://pypi.org/project/string-color
  "verboselogs==1.7",         # https://pypi.org/project/verboselogs
]

[dependency-groups]
dev = [
  "mypy>=1.14.1",                     # https://pypi.org/project/mypy
  "pre-commit>=4.0.1",                # https://pypi.org/project/pre-commit
  "pycountry>=24.6.1",                # https://pypi.org/project/pycountry
  "pylint>=3.3.3",                    # https://pypi.org/project/pylint
  "pytest-aiofiles>=0.2.0",           # https://pypi.org/project/pytest-aiofiles
  "pytest-aiohttp>=1.0.5",            # https://pypi.org/project/pytest-aiohttp
  "pytest-asyncio>=0.25.2",           # https://pypi.org/project/pytest-asyncio
  "pytest-cov>=6.0.0",                # https://pypi.org/project/pytest-cov
  "pytest-docker-fixtures>=1.3.19",   # https://pypi.org/project/pytest-docker-fixtures
  "pytest-env>=1.1.5",                # https://pypi.org/project/pytest-env
  "pytest-timeout>=2.3.1",            # https://pypi.org/project/pytest-timeout
  "pytest>=8.3.4",                    # https://pypi.org/project/pytest
  "ruff>=0.9.1",                      # https://pypi.org/project/ruff
  "testfixtures>=8.3.0",              # https://pypi.org/project/testfixtures
  "types-aiofiles>=24.1.0.20241221",  # https://pypi.org/project/types-aiofiles
  "types-cachetools>=5.5.0.20240820", # https://pypi.org/project/types-cachetools
  "types-mock>=5.1.0.20240425",       # https://pypi.org/project/types-mock
  "types-pillow>=10.2.0.20240822",    # https://pypi.org/project/types-pillow
  "types-pytz>=2024.2.0.20241221",    # https://pypi.org/project/types-pytz
]

[project.scripts]
vm-clockify = "vm_clockify.main:cli"

[tool.hatch.build.targets.sdist]
include = ["/vm_clockify"]

[tool.hatch.version]
source = "vcs"

# ____________________________________ RUFF ____________________________________
# https://docs.astral.sh/ruff/settings/
[tool.ruff]
line-length = 130
fix = true

[tool.ruff.format]
# quote-style = "single"
indent-style = "space"
docstring-code-format = true

[tool.ruff.lint]
select = ["ALL"]

extend-select = [
  "UP", # pyupgrade
  "D",  # pydocstyle
]

ignore = [
  "G004",    # Logging statement uses f-string
  "PLR2004", # Magic value used in comparison, consider replacing 5 with a constant variable
  "D107",    # Missing docstring in `__init__`
  "ERA001",  # Found commented-out code
  "FBT001",  # Boolean-typed positional argument in function definition
  "FBT002",  # Boolean default positional argument in function definition
  "BLE001",  # Do not catch blind exception: `Exception`
  "TRY300",  # Consider moving this statement to an `else` block
  "RUF012",  # Mutable class attributes should be annotated with `typing.ClassVar`
  "TD002",   # Missing author in TODO; try: `# TODO(<author_name>): ...` or `# TODO @<author_name>: ...`
  "TD003",   # Missing issue link on the line following this TODO
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = [
  "F403", # Checks for the use of wildcard imports.
  "F405", # Checks for names that might be undefined
]
"tests/**" = [
  "D100",   # Missing docstring in public module
  "D103",   # Missing docstring in public function
  "D104",   # Missing docstring in public package
  "N802",   # Function name {name} should be lowercase
  "N806",   # Variable `userId` in function should be lowercase
  "N816",   # Variable {name} in global scope should not be mixedCase
  "S101",   # Use of assert detected
  "S106",   # Possible hardcoded password assigned to argument: "password_file"
  "SLF001", # Private member accessed: {access}
]

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"

[tool.ruff.lint.isort]
combine-as-imports = true
force-sort-within-sections = true
case-sensitive = true
extra-standard-library = ["typing_extensions"]

[tool.ruff.lint.mccabe]
max-complexity = 20

[tool.ruff.lint.pylint]
max-args = 13
max-branches = 25
max-statements = 70
max-returns = 10

# ----------------------------------- PYTEST -----------------------------------
[tool.pytest.ini_options]
addopts = ["--cov=./", "--cov-report=xml"]
testpaths = ["tests"]
pythonpath = "vm_clockify"
env = []
asyncio_mode = "auto"
timeout = 10
# log_cli = true
# log_level = "INFO"

# ------------------------------------ MYPY ------------------------------------
[tool.mypy]
follow_imports = "silent"
show_error_codes = true
ignore_missing_imports = true
strict_equality = true
warn_incomplete_stub = true
warn_redundant_casts = true
warn_unused_configs = true
warn_unused_ignores = true
check_untyped_defs = true
disallow_incomplete_defs = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_return_any = true
warn_unreachable = true
strict = true

# ----------------------------------- PYLINT -----------------------------------
[tool.pylint.MAIN]
jobs = 2
ignore = ["tests"]
fail-on = ["I"]
max-line-length = 130

[tool.pylint.BASIC]
# Good variable names which should always be accepted, separated by a comma.
good-names = ["i", "j", "k", "e", "ex", "f", "_", "T", "x", "y", "id", "tg"]

[tool.pylint."MESSAGES CONTROL"]
# Reasons disabled:
# duplicate-code - unavoidable
# too-many-* - are not enforced for the sake of readability
disable = [
  "duplicate-code",
  "too-few-public-methods",
  "too-many-arguments",
  "too-many-instance-attributes",
  "too-many-locals",
  "too-many-ancestors",
  "logging-fstring-interpolation",
  "broad-exception-caught",
  "broad-exception-raised",
  "fixme",
  "import-error",
  "invalid-name",
]
# enable useless-suppression temporarily every now and then to clean them up
enable = [
  "useless-suppression",
  "use-symbolic-message-instead",
  "c-extension-no-member",
]

[tool.pylint.REPORTS]
score = false

[tool.pylint.FORMAT]
expected-line-ending-format = "LF"

[tool.pylint.EXCEPTIONS]
overgeneral-exceptions = ["builtins.BaseException", "builtins.Exception"]

[tool.pylint.REFACTORING]
max-nested-blocks = 5
never-returning-functions = ["sys.exit", "argparse.parse_error"]

[tool.pylint.DESIGN]
max-branches = 20             # too-many-branches
max-parents = 10
max-positional-arguments = 13 # too-many-positional-arguments
max-returns = 7
max-statements = 60           # too-many-statements
